{"version":3,"file":"autosize-input.directive.js","sourceRoot":"","sources":["../src/autosize-input.directive.ts"],"names":[],"mappings":"OAGO,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAuB,MAAM,eAAe;AAGxF;IAOI,gCAAmB,OAAmB;QAAnB,YAAO,GAAP,OAAO,CAAY;IACtC,CAAC;IALD,wCAAO,GAAP;QACI,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAKD,sDAAqB,GAArB;QACI,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAED,4CAAW,GAAX;QACI,IAAM,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACpG,IAAM,UAAU,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAC3G,IAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC;cAC5G,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC;IACjE,CAAC;IAED,6CAAY,GAAZ,UAAa,KAAa,EAAE,QAAa,EAAE,UAAkB;QACzD,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,GAAI,CAAC,IAAI,GAAM,QAAQ,WAAM,UAAY,CAAC;QAC1C,MAAM,CAAC,GAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;IACzC,CAAC;IAEE,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAE,oBAAoB;iBACjC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,qCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;KACnB,EAF6F,CAE7F,CAAC;IACK,qCAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,eAAe,CAAC,EAAG,EAAE,EAAE;KACzE,CAAC;IACF,6BAAC;AAAD,CAAC,AAzCD,IAyCC","sourcesContent":["/**\r\n * Created by Joshua Wright on 11/2/2017\r\n */\r\nimport { ElementRef, HostListener, Directive, AfterContentChecked } from '@angular/core';\r\n\r\n\r\nexport class AutoSizeInputDirective implements AfterContentChecked {\r\n\r\n    \r\n    onInput(): void {\r\n        this.adjustWidth();\r\n    }\r\n\r\n    constructor(public element: ElementRef) {\r\n    }\r\n\r\n    ngAfterContentChecked(): void {\r\n        this.adjustWidth();\r\n    }\r\n\r\n    adjustWidth(): void {\r\n        const style = window.getComputedStyle(this.element.nativeElement, '').getPropertyValue('font-size');\r\n        const fontFamily = window.getComputedStyle(this.element.nativeElement, '').getPropertyValue('font-family');\r\n        const fontSize = parseFloat(style);\r\n        this.element.nativeElement.style.width = this.getTextWidth(this.element.nativeElement.value, fontSize, fontFamily)\r\n            + this.getTextWidth('____', fontSize, fontFamily) + 'px';\r\n    }\r\n\r\n    getTextWidth(value: string, fontSize: any, fontFamily: string) {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        ctx!.font = `${fontSize}px ${fontFamily}`;\r\n        return ctx!.measureText(value).width;\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[appAutoSizeInput]',\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onInput': [{ type: HostListener, args: ['input', ['$event.target'], ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}